#! /usr/bin/env python

from argparse import ArgumentParser
import pkg_resources
from sctools import sctools


version = pkg_resources.require("sctools")[0].version
parser = ArgumentParser(description='Collection of tools for 10x chromium single-cell RNA-seq data analysis')
parser.add_argument('--version', action='version', version='%(prog)s '+str(version))
subparsers = parser.add_subparsers(title='Subcommands')

# filterbarcodes
parser_filterbarcodes = subparsers.add_parser('filterbarcodes', description='Filter reads based on input list of cell barcodes')
parser_filterbarcodes.add_argument('-b', '--bam', help='Input bam file (must be indexed)', required=True)
parser_filterbarcodes.add_argument('-c', '--cells', help='File or comma-separated list of cell barcodes. Can be gzip compressed', required=True)
parser_filterbarcodes.add_argument('-o', '--output', help='Name for output text file', required=True)
parser_filterbarcodes.add_argument('-s', '--sam', help='Output sam format (default bam output)', required=False, action='store_true', default=False)
parser_filterbarcodes.add_argument('-p', '--nproc', help='Number of processors (default = 1)', required=False, default=1)
parser_filterbarcodes.set_defaults(func=sctools.filterbarcodes)

# countsnps
parser_countsnps = subparsers.add_parser('countsnps', description='Count reference and alternate SNPs per cell in single-cell RNA data')
parser_countsnps.add_argument('-b', '--bam', help='Input bam file (must be indexed)', required=True)
parser_countsnps.add_argument('-s', '--snp', help='File with SNPs. Needs chromosome, position, reference, alternate as first four columns', required=True)
parser_countsnps.add_argument('-o', '--output', help='Name for output text file', required=True)
parser_countsnps.add_argument('-c', '--cells', help='File or comma-separated list of cell barcodes to count SNPs for. Can be gzip compressed (optional)', required=False)
parser_countsnps.add_argument('-p', '--nproc', help='Number of processors (default = 1)', required=False, default=1)
parser_countsnps.set_defaults(func=sctools.countsnps)

# countedited
parser_countedited = subparsers.add_parser('countedited', description='Count edited transcripts per gene per cell in single-cell RNA data. Output is a matrix of positions by cells.')
parser_countedited.add_argument('-b', '--bam', help='Input bam file (must be indexed)', required=True)
parser_countedited.add_argument('-e', '--edit', help='File with edited base coordinates. Needs chromosome, position, reference, alternate as first four columns', required=True)
parser_countedited.add_argument('-o', '--output', help='Name for output text file', required=True)
parser_countedited.add_argument('-c', '--cells', help='File containing cell barcodes to count edited bases for. Can be gzip compressed (optional)', required=False)
parser_countedited.add_argument('-p', '--nproc', help='Number of processors (default = 1)', required=False, default=1)
parser_countedited.set_defaults(func=sctools.countedited)

# genotype
parser_genotype = subparsers.add_parser('genotype', description='Genotype cells based on SNP UMI counts.')
parser_genotype.add_argument('-s', '--infile', help='SNP UMI counts for each genotype', required=True)
parser_genotype.add_argument('-o', '--outfile', help='Name for output text file', required=True)
parser_genotype.add_argument('-n', '--nproc', help='Number of processors (default = 1)', required=False, default=1)
parser_genotype.add_argument('-p', '--plot', help='Plot results', required=False, default=False, action='store_true')
parser_genotype.add_argument('-d', '--downsample', help='Do not downsample cells before detecting background cluster',
                             required=False, default=True, action='store_false')
parser_genotype.add_argument('--eps_background', help='DBSCAN epsilon value for background cell clustering', required=False, default=0.5)
parser_genotype.add_argument('--eps_cells', help='DBSCAN epsilon value for background cell clustering', required=False, default=0.2)
parser_genotype.add_argument('--min_samples_background', help='Minimum number of cells in each cluster for background cell clustering',
                             required=False, default=300)
parser_genotype.add_argument('--min_samples_cells', help='Minimum number of cells in each cluster for cell clustering',
                             required=False, default=100)
parser_genotype.add_argument('--min_umi', help='Minimum number of UMIs for a cell barcode to be entered into clustering steps (count)',
                             required=False, default=10)
parser_genotype.set_defaults(func=sctools.run_genotype)

options = parser.parse_args()
options.func(options)
